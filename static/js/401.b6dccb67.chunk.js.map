{"version":3,"file":"static/js/401.b6dccb67.chunk.js","mappings":"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","sources":["components/ContactsEntry/ContactsEntry.styled.js","redux/contacts/contacts.selectors.js","redux/filter/filter.selectors.js","components/ContactsEntry/ContactsEntry.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 4px;\n`;\n\nexport const Button = styled.button`\n  margin: 16px auto;\n  padding: 4px;\n  width: 10em;\n  border: 1px solid blue;\n  border-radius: 4px;\n  background-color: ${({ theme: { colors } }) => colors.bgColorBtn};\n  cursor: pointer;\n  box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  -webkit-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  transition: color 150ms ease-in, background-color 150ms ease-in,\n    scale 150ms ease-in;\n  &:is(:hover, :focus) {\n    outline: none;\n    color: ${({ theme: { colors } }) => colors.colorBtnHover};\n    background-color: ${({ theme: { colors } }) => colors.bgColorBtnHover};\n  }\n  &:active {\n    scale: 0.95;\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  font-size: 14px;\n  color: ${({ theme: { colors } }) => colors.colorErr};\n`;\n\nexport const Title = styled.h1`\n  text-align: center;\n  font-size: 28px;\n  color: ${({ theme: { colors } }) => colors.colorH1};\n`;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/filter.selectors';\n\nexport const selectContacts = state => state.contacts.list;\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","export const selectFilter = state => state.filter;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport {\n  Label,\n  StyledForm,\n  StyledField,\n  Button,\n  ErrorMsg,\n  Title,\n} from './ContactsEntry.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts.selectors';\nimport { addContacts } from 'redux/contacts/contacts.operations';\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(5, 'Too Short!')\n    .max(15, 'Too Long!')\n    .matches(\n      /\\d{3}-\\d{3}-\\d{4}/g,\n      'Must contain only numbers or be in the correct format'\n    )\n    .required('Required'),\n});\n\nexport const ContactsEntry = () => {\n  const dispatch = useDispatch();\n  const list = useSelector(selectContacts);\n\n  const onSubmitForm = (values, reset) => {\n    const isDuplicated = list.find(\n      item => item.name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (isDuplicated) return alert(values.name + ' is already in contacts');\n    dispatch(addContacts(values));\n    reset.resetForm();\n  };\n\n  return (\n    <>\n      <Title>Phonebook</Title>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={onSubmitForm}\n      >\n        <StyledForm>\n          <Label htmlFor=\"username\">Name</Label>\n          <StyledField\n            id=\"username\"\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"User name\"\n            required\n          />\n          <ErrorMsg name=\"name\" component=\"span\"></ErrorMsg>\n          <Label htmlFor=\"usernumber\">Number</Label>\n          <StyledField\n            id=\"usernumber\"\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"Phone number in the format 123-456-7890\"\n            required\n          />\n          <ErrorMsg name=\"number\" component=\"span\"></ErrorMsg>\n          <Button type=\"submit\">Add contact</Button>\n        </StyledForm>\n      </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  padding: 4px;\n  width: 100%;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Input } from './Filter.styled';\nimport { changeFilter } from 'redux/filter/filter.slice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Input\n        type=\"text\"\n        placeholder=\"Search...\"\n        onChange={evt => dispatch(changeFilter(evt.target.value))}\n      ></Input>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  font-size: 28px;\n  color: ${({ theme: { colors } }) => colors.colorH2};\n  & > sup {\n    font-size: 16px;\n    color: blue;\n    margin-left: 8px;\n    font-weight: 700;\n  }\n`;\nexport const HeadContacts = styled.div`\n  display: flex;\n  gap: 18px;\n  align-items: center;\n  margin-bottom: 14px;\n`;\nexport const ContactList = styled.ul``;\nexport const ContactListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  & > span {\n    display: inline-block;\n    text-align: center;\n    &:nth-child(1) {\n      width: 230px;\n      font-size: 18px;\n      color: ${({ theme: { colors } }) => colors.colorName};\n      font-style: italic;\n      text-align: left;\n    }\n    &:nth-child(2) {\n      font-weight: 700;\n      color: ${({ theme: { colors } }) => colors.colorPhone};\n      text-align: center;\n    }\n    &:nth-child(3) {\n      width: 60px;\n      text-align: right;\n    }\n  }\n`;\n\nexport const DelButton = styled.button`\n  display: inline-block;\n  font-size: 14px;\n  border: 1px solid teal;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: color 150ms ease-in, background-color 150ms ease-in,\n    scale 150ms ease-in;\n  &:is(:hover, :focus) {\n    color: white;\n    background-color: ${({ theme: { colors } }) => colors.bgcDelBtnHover};\n  }\n  &:active {\n    scale: 0.95;\n  }\n`;\n\nexport const UpdateButton = DelButton;\n\nexport const MessageAboutEmpty = styled.div`\n  font-weight: 500;\n  text-align: center;\n  color: ${({ theme: { colors } }) => colors.colorErr};\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Filter } from 'components/Filter/Filter';\nimport {\n  ContactList,\n  ContactListItem,\n  DelButton,\n  HeadContacts,\n  MessageAboutEmpty,\n  Title,\n  UpdateButton,\n} from './ContactsList.styled';\nimport { delContacts } from 'redux/contacts/contacts.operations';\nimport {\n  selectContacts,\n  selectFilteredContacts,\n} from 'redux/contacts/contacts.selectors';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const list = useSelector(selectContacts);\n  const contacts = useSelector(selectFilteredContacts);\n\n  return (\n    <>\n      <HeadContacts>\n        <Title>\n          Contacts\n          <sup>\n            {contacts.length === list.length\n              ? `${list.length}`\n              : `${contacts.length}/${list.length}`}\n          </sup>\n        </Title>\n        <Filter />\n      </HeadContacts>\n      <ContactList>\n        {contacts.length === 0 ? (\n          <MessageAboutEmpty>No entries to display</MessageAboutEmpty>\n        ) : (\n          contacts.map(({ id, name, number }) => (\n            <ContactListItem key={id}>\n              <span>{name}:</span>\n              <span>{number}</span>\n              <span>\n                <UpdateButton\n                  type=\"button\"\n                  onClick={() => {\n                    if (window.confirm('Are you sure?'))\n                      dispatch(delContacts(id));\n                  }}\n                >\n                  Edit\n                </UpdateButton>\n              </span>\n              <span>\n                <DelButton\n                  type=\"button\"\n                  onClick={() => {\n                    if (window.confirm('Are you sure?'))\n                      dispatch(delContacts(id));\n                  }}\n                >\n                  Delete\n                </DelButton>\n              </span>\n            </ContactListItem>\n          ))\n        )}\n      </ContactList>\n    </>\n  );\n};\n","import { ContactsEntry } from 'components/ContactsEntry/ContactsEntry';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts.operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <ContactsEntry />\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","StyledField","Field","_templateObject3","Button","_templateObject4","_ref","theme","colors","bgColorBtn","_ref2","colorBtnHover","_ref3","bgColorBtnHover","ErrorMsg","ErrorMessage","_templateObject5","_ref4","colorErr","Title","_templateObject6","_ref5","colorH1","selectContacts","state","contacts","list","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","SignupSchema","Yup","shape","min","max","required","number","matches","ContactsEntry","dispatch","useDispatch","useSelector","_jsxs","_Fragment","children","_jsx","Formik","initialValues","validationSchema","onSubmit","values","reset","find","item","alert","addContacts","resetForm","htmlFor","id","type","title","placeholder","component","Input","Filter","onChange","evt","changeFilter","target","value","colorH2","HeadContacts","ContactList","ContactListItem","colorName","colorPhone","DelButton","bgcDelBtnHover","UpdateButton","MessageAboutEmpty","ContactsList","length","concat","map","onClick","window","confirm","delContacts","Contacts","useEffect","fetchContacts"],"sourceRoot":""}