{"version":3,"file":"static/js/448.bf9f9ee1.chunk.js","mappings":"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","sources":["components/ContactsEntry/ContactsEntry.styled.js","redux/contacts/contacts.selectors.js","redux/filter/filter.selectors.js","components/ContactsEntry/ContactsEntry.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 4px;\n  width: 20em;\n`;\n\nexport const Button = styled.button`\n  margin: 16px auto;\n  padding: 4px;\n  width: 10em;\n  border: 1px solid blue;\n  border-radius: 4px;\n  background-color: ${({ theme: { colors } }) => colors.bgColorBtn};\n  cursor: pointer;\n  box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  -webkit-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.75);\n  transition: color 150ms ease-in, background-color 150ms ease-in,\n    scale 150ms ease-in;\n  &:is(:hover, :focus) {\n    outline: none;\n    color: ${({ theme: { colors } }) => colors.colorBtnHover};\n    background-color: ${({ theme: { colors } }) => colors.bgColorBtnHover};\n  }\n  &:active {\n    scale: 0.95;\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  font-size: 14px;\n  color: ${({ theme: { colors } }) => colors.colorErr};\n`;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/filter.selectors';\n\nexport const selectContacts = state => state.contacts.list;\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","export const selectFilter = state => state.filter;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport {\n  Label,\n  StyledForm,\n  StyledField,\n  Button,\n  ErrorMsg,\n} from './ContactsEntry.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts.selectors';\nimport { addContacts } from 'redux/contacts/contacts.operations';\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(5, 'Too Short!')\n    .max(15, 'Too Long!')\n    .matches(\n      /\\d{3}-\\d{3}-\\d{4}/g,\n      'Must contain only numbers or be in the correct format'\n    )\n    .required('Required'),\n});\n\nexport const ContactsEntry = () => {\n  const dispatch = useDispatch();\n  const list = useSelector(selectContacts);\n\n  const onSubmitForm = (values, reset) => {\n    const isDuplicated = list.find(\n      item => item.name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (isDuplicated) return alert(values.name + ' is already in contacts');\n    dispatch(addContacts(values));\n    reset.resetForm();\n  };\n\n  return (\n    <>      \n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={onSubmitForm}\n      >\n        <StyledForm>\n          <Label htmlFor=\"username\">Name</Label>\n          <StyledField\n            id=\"username\"\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"User name\"\n            required\n          />\n          <ErrorMsg name=\"name\" component=\"span\"></ErrorMsg>\n          <Label htmlFor=\"usernumber\">Number</Label>\n          <StyledField\n            id=\"usernumber\"\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"Phone number in the format 123-456-7890\"\n            required\n          />\n          <ErrorMsg name=\"number\" component=\"span\"></ErrorMsg>\n          <Button type=\"submit\">Add contact</Button>\n        </StyledForm>\n      </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  padding: 4px;\n  width: 100%;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Input } from './Filter.styled';\nimport { changeFilter } from 'redux/filter/filter.slice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Input\n        type=\"text\"\n        placeholder=\"Search...\"\n        onChange={evt => dispatch(changeFilter(evt.target.value))}\n      ></Input>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Title = styled.h2`\n  font-size: 28px;\n  color: ${({ theme: { colors } }) => colors.colorH2};\n  & > sup {\n    font-size: 16px;\n    color: blue;\n    margin-left: 8px;\n    font-weight: 700;\n  }\n`;\nexport const HeadContacts = styled.div`\n  display: flex;\n  gap: 18px;\n  align-items: center;\n  margin-bottom: 14px;\n`;\nexport const ContactList = styled.ul``;\nexport const ContactListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  & > span {\n    display: inline-block;\n    text-align: center;\n    &:nth-child(1) {\n      width: 230px;\n      font-size: 18px;\n      color: ${({ theme: { colors } }) => colors.colorName};\n      font-style: italic;\n      text-align: left;\n    }\n    &:nth-child(2) {\n      font-weight: 700;\n      color: ${({ theme: { colors } }) => colors.colorPhone};\n      text-align: center;\n    }\n    &:nth-child(3) {\n      width: 60px;\n      text-align: right;\n    }\n  }\n`;\n\nexport const DelButton = styled.button`\n  display: inline-block;\n  font-size: 14px;\n  border: 1px solid teal;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: color 150ms ease-in, background-color 150ms ease-in,\n    scale 150ms ease-in;\n  &:is(:hover, :focus) {\n    color: white;\n    background-color: ${({ theme: { colors } }) => colors.bgcDelBtnHover};\n  }\n  &:active {\n    scale: 0.95;\n  }\n`;\n\nexport const UpdateButton = DelButton;\n\nexport const MessageAboutEmpty = styled.div`\n  font-weight: 500;\n  text-align: center;\n  color: ${({ theme: { colors } }) => colors.colorErr};\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Filter } from 'components/Filter/Filter';\nimport {\n  ContactContainer,\n  ContactList,\n  ContactListItem,\n  DelButton,\n  HeadContacts,\n  MessageAboutEmpty,\n  Title,\n  UpdateButton,\n} from './ContactsList.styled';\nimport {\n  delContacts,\n  updateContacts,\n} from 'redux/contacts/contacts.operations';\nimport {\n  selectContacts,\n  selectFilteredContacts,\n} from 'redux/contacts/contacts.selectors';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const list = useSelector(selectContacts);\n  const contacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ContactContainer>\n      <HeadContacts>\n        <Title>\n          Contacts\n          <sup>\n            {contacts.length === list.length\n              ? `${list.length}`\n              : `${contacts.length}/${list.length}`}\n          </sup>\n        </Title>\n        <Filter />\n      </HeadContacts>\n      <ContactList>\n        {contacts.length === 0 ? (\n          <MessageAboutEmpty>No entries to display</MessageAboutEmpty>\n        ) : (\n          contacts.map(({ id, name, number }) => (\n            <ContactListItem key={id}>\n              <span>{name}:</span>\n              <span>{number}</span>\n              <span>\n                <UpdateButton\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(updateContacts(id));\n                  }}\n                >\n                  Edit\n                </UpdateButton>\n              </span>\n              <span>\n                <DelButton\n                  type=\"button\"\n                  onClick={() => {\n                    if (window.confirm('Are you sure?'))\n                      dispatch(delContacts(id));\n                  }}\n                >\n                  Delete\n                </DelButton>\n              </span>\n            </ContactListItem>\n          ))\n        )}\n      </ContactList>\n    </ContactContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactsInfo = styled.div`\n  width: 100%;\n  margin-top: 48px;\n  display: flex;\n  justify-content: center;\n  gap: 48px;\n`;\n\nexport const TitleH1 = styled.h1`\n  margin-top: 12px;\n  text-align: center;\n  font-size: 28px;\n  color: ${({ theme: { colors } }) => colors.colorH1};\n`;\n","import { ContactsEntry } from 'components/ContactsEntry/ContactsEntry';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts.operations';\nimport { ContactsInfo, TitleH1 } from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <TitleH1>Phonebook</TitleH1>\n      <ContactsInfo>\n        <ContactsEntry />\n        <ContactsList />\n      </ContactsInfo>\n    </>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","StyledField","Field","_templateObject3","Button","_templateObject4","_ref","theme","colors","bgColorBtn","_ref2","colorBtnHover","_ref3","bgColorBtnHover","ErrorMsg","ErrorMessage","_templateObject5","_ref4","colorErr","selectContacts","state","contacts","list","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","SignupSchema","Yup","shape","min","max","required","number","matches","ContactsEntry","dispatch","useDispatch","useSelector","_jsx","_Fragment","children","Formik","initialValues","validationSchema","onSubmit","values","reset","find","item","alert","addContacts","resetForm","_jsxs","htmlFor","id","type","title","placeholder","component","Input","Filter","onChange","evt","changeFilter","target","value","ContactContainer","Title","colorH2","HeadContacts","ContactList","ContactListItem","colorName","colorPhone","DelButton","_templateObject6","bgcDelBtnHover","UpdateButton","MessageAboutEmpty","_templateObject7","_ref5","ContactsList","length","concat","map","onClick","updateContacts","window","confirm","delContacts","ContactsInfo","TitleH1","colorH1","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}